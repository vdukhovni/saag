<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
  <!ENTITY rfc3207 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3207.xml">
  <!ENTITY rfc4033 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4033.xml">
  <!ENTITY rfc4949 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4949.xml">
  <!ENTITY rfc5116 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5116.xml">
  <!ENTITY rfc5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
  <!ENTITY rfc5598 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5598.xml">
  <!ENTITY rfc6125 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6125.xml">
  <!ENTITY rfc6698 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6698.xml">
  <!ENTITY rfc7258 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7258.xml">
  <!ENTITY I-D.ietf-dane-smtp-with-dane SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-dane-smtp-with-dane.xml">
]>

<?rfc compact="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc strict="yes" ?>
<?rfc subcompact="no" ?>
<?rfc symrefs="yes" ?>
<?rfc toc="yes" ?>

<rfc submissionType="independent" category="info" docName="draft-dukhovni-opportunistic-security-@@VERSION@@" ipr="trust200902">
 <front>
  <title abbrev="Opportunistic Security">Opportunistic Security: Some
  Protection Most of the Time</title>
  <author initials="V." surname="Dukhovni" fullname="Viktor Dukhovni">
   <organization>Two Sigma</organization>
   <address>
    <email>ietf-dane@dukhovni.org</email>
   </address>
  </author>

  <date />

  <abstract>

   <t>
     This memo introduces the "Opportunistic Security" (OS) protocol
     design pattern.  Protocol designs based on OS depart from the
     established practice of employing cryptographic protection
     against both passive and active attacks, or no protection at
     all.  OS protocols tailor the minimum acceptable channel
     security to the capabilities of the peer systems.  As a result,
     at least some cryptographic protection is provided most of the
     time.
   </t>

   <t>
     This document is aimed primarily at protocol designers.  It
     facilitates designs that are more resistant to passive wiretaps,
     and designs in which cryptographic protection against active
     attacks can be rolled out incrementally as suitably capable
     systems are deployed.  Another audience is operators who set
     policy for systems that can implement opportunistic security.
   </t>

  </abstract>

 </front>

 <middle>
  <section title="Introduction">

   <t>
     Encryption is easy, but key management is difficult.  For
     example, the Public Key Infrastructure (PKI) used for the web
     (often called the "Web PKI") is based on broadly trusted public
     certification authorities (CAs).  The Web PKI has too many
     fully trusted authorities and imposes burdens that not all
     peers are willing to bear.  Web PKI public CAs are not always
     sufficient to authenticate the peer system.  Web PKI authentication
     is vulnerable to MiTM attacks when the peer reference identifier
     (<xref target="RFC6125"/>) is obtained indirectly over an
     insecure channel, perhaps via an MX or SRV lookup.  And with
     so many certification authorities the communicating parties
     don't always agree on a mutually trusted CA.
   </t>

   <t>
     At this time, DNS Security (DNSSEC <xref target="RFC4033"/>)
     is not sufficiently widely adopted to make DNS-Based Authentication
     of Named Entities (DANE <xref target="RFC6698"/>) a viable
     ubiquitous alternative to CAs.  Trust on first use (TOFU) key management
     models (such as saved SSH fingerprints and various certificate
     pinning approaches) don't protect initial contact, and require more
     user intervention when keys change unexpectedly.
   </t>

   <t>
     Historically, Internet security protocols have prioritized
     comprehensive cryptographic protection against both passive
     and active attacks.  Protection against active attacks requires
     authentication, but the lack of a universal key management
     approach has created a situation in which only a minority of
     peers can be authenticated.  When protocols only offer the
     options of an authenticated secure channel or cleartext, most
     traffic is sent in the clear.  As a result, while communications
     traffic is sometimes strongly protected, more typically it is
     not protected at all.  The fact that most traffic is unencrypted
     makes pervasive monitoring easier by making it cost-effective,
     or at least not cost-prohibitive; see <xref target="RFC7258"/>
     for more detail.
   </t>

   <t>
     If security protocols were designed to encrypt traffic whenever
     possible, bulk collection of communications traffic would be
     substantially less attractive.  Even if one is not concerned
     about pervasive monitoring, passive wiretaps by individual
     malicious actors or criminal organizations are still a potential
     problem for individuals and organizations.  Using the opportunistic
     security design makes passive attacks more difficult for all
     these actors.
   </t>

   <t>
     In order to make encryption more ubiquitous, authentication
     should not be required where it cannot be expected.  Against
     the background of pervasive monitoring and other passive
     attacks, when authenticated communication is not possible,
     unauthenticated encryption is preferable to cleartext.  The
     opportunistic security design pattern promotes stepping up
     from cleartext, not down from authenticated encryption.
     Opportunistic security encourages peers to employ as much
     security as possible, without falling back on unnecessarily
     weak options.  In particular, opportunistic security encourages
     unauthenticated encryption rather than cleartext when
     authentication is not an option.
   </t>

   <t>
     The risk of active attacks should also not be ignored.  The
     opportunistic security design pattern features a range of
     cryptographic protection levels, with encrypted transmission
     accessible to most if not all peers.  Even with opportunistic
     security, protection against active attacks is still employed
     where unconditionally required by policy or else determined
     to be applicable with a given peer.
   </t>

  </section>

  <section title="Terminology" anchor="sec_terminology">

   <t>
     The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
     NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
     "MAY", and "OPTIONAL" in this document are to be interpreted
     as described in <xref target="RFC2119"/>.  In this document,
     these key words are used to avoid security lapses, rather
     than to ensure interoperability.  In any case, the OS design
     pattern also promotes interoperability.
   </t>

   <t>
     <list style="hanging">

       <t hangText="Perfect Forward Secrecy (PFS):"> As defined
       in <xref target="RFC4949"/>.  </t>

       <t hangText="Man-in-the-Middle (MiTM) attack:"> As defined
       in <xref target="RFC4949"/>.  </t>

       <t hangText="Trust on First Use (TOFU):">In a protocol, TOFU
       typically consists of accepting an asserted identity, without
       authenticating that assertion, and caching a key or credential
       associated with the identity.  Subsequent communication using the
       cached key/credential is secure against an MiTM attack, if such an
       attack did not succeed during the (vulnerable) initial
       communication or if the MiTM is not present for all subsequent
       communications.  The SSH protocol makes use of TOFU. The phrase
       "leap of faith" (LoF) is sometimes used as a synonym.  </t>

       <t hangText="Unauthenticated Encryption:">Encryption using
       a key agreement scheme that does not authenticate the
       identities of the peers.  In typical usage, this means that
       the initiator (client) has not verified the identity of the
       target (server), making MiTM attacks possible.  Note that
       unauthenticated encryption is not the opposite of Authenticated
       Encryption with Associated Data (AEAD, <xref target="RFC5116"/>),
       AEAD algorithms can be used with either authenticated or
       unauthenticated peers.  </t>

     </list>
   </t>

  </section>

  <section title="The Opportunistic Security Design Pattern">

   <t>
     Opportunistic Security is a protocol design pattern that aims
     to remove barriers to the widespread use of encryption on the
     Internet.
   </t>

   <t>
     The opportunistic security design pattern involves using the
     advertised capability of communicating peers, either in-band or
     out-of band, to determine what security mechanisms are used and
     how.  This includes the specific mechanisms, whether to require
     their use, how to handle errors and what to do when mechanisms
     are disabled.
   </t>

   <t>
     Security services that "just work" are more likely to be
     deployed and enabled by default.  When the advertised
     capabilities of peers match reality, an opportunistic security
     design avoids causing communications issues that would otherwise
     prevent the deployment of protocol security.
   </t>

   <t>
     The determination of which security mechanisms to use can vary
     from case to case when the OS design pattern is used with
     different protocols.  The protection provided by the OS pattern
     will depend on the protocol making use of the pattern.  In many
     cases, OS will result in negotiating channels with one of the
     following security properties:

     <list style="symbols">
      <t> No encryption (cleartext), which protects against neither
      passive nor active attacks.  </t>

      <t> Unauthenticated encryption, which protects only against
      passive attacks.  </t>

      <t> Authenticated encryption, which protects against both
      passive and active attacks.  </t>

     </list>
   </t>

   <t>
     Opportunistic security does not start with an overly optimistic
     view of peer capabilities only to be "disappointed" and settle
     for less when the peer fails to live up to expectations.
     Rather, the opportunistic security design pattern starts with
     a pessimistic view of the baseline capabilities of all peers,
     and is "pleasantly surprised" to learn that some peers can be
     expected to do more.  Opportunistic security aims to do better
     than might be expected, rather than worse than might be hoped.
   </t> <!-- this seems nice, but I was tempted to cut it too -->

   <t>
     Enforcement of authentication in an opportunistic
     protocol is not a contradiction.  Opportunistic security
     protocols should provide a means to enforce authentication
     for those peers for which authentication is required by policy
     or can be expected to succeed based on information provided
     by the peer.
   </t>

   <t>
     Unless preempted by local or other policy, an opportunistic
     security protocol first determines the capabilities of a peer.
     This might include whether that peer supports authenticated
     encryption, unauthenticated encryption or perhaps only
     cleartext.  The appropriate communications security policy is
     then employed for each peer.
   </t>

   <t>
     Authentication failure can be a reason to abort a connection to
     a peer that is expected to be authenticated.  However, such a
     failure cannot then lead to communication in cleartext when
     encryption is an option.  For example, some Message Transfer
     Agents (MTAs, <xref target="RFC5598"/> Section 4.3.2) employing
     STARTTLS (<xref target="RFC3207"/>) have been observed to abort
     TLS (<xref target="RFC5246"/>) transmission when the receiving
     MTA fails authentication, only to immediately deliver the same
     message over a cleartext connection.  The OS design pattern
     avoids this obvious problem.
   </t>

   <t>
     Cleartext support is for backwards compatibility with already
     deployed systems.  Cleartext transmission should be avoided in
     new OS protocol designs.  Even when cleartext needs to be
     supported, protocol designs based on opportunistic security
     prefer to encrypt, allowing fallback to cleartext with peers
     that do not appear to be encryption capable.
   </t>

  </section>

  <section title="Opportunistic Security Design Principles">

   <t>
    <list style="hanging">

     <t hangText="Coexist with explicit policy:">Explicit security
     policy preempts opportunistic behavior.  Administrators or
     users may elect to disable opportunistic security for some or
     all peers and set a fixed security policy not based on
     capabilities advertised or published by the peer.  Alternatively,
     opportunistic security might be enabled only for specified peers,
     rather than by default.  Opportunistic security is not intended
     to displace or preempt local policy.  </t>

     <t hangText="Prioritize not getting in the way:">
     The primary goal of designs that feature opportunistic security
     is to enable communication and maximize deployment.  If a
     non-negligible number of potential peers are only capable of
     cleartext, then it is acceptable to fall back to cleartext when
     encryption is not possible.  If authentication is only possible
     for some peers, then it is acceptable to authenticate only those
     peers and not the rest.  Opportunistic security must not get in
     the way of the peers communicating if either end is
     misconfigured (i.e., neither publishes or negotiates security
     services that are not available or don't function correctly).
     </t>

     <t hangText="Maximize security peer by peer:"> Opportunistic
     security strives to maximize security based on the capabilities
     of the peers.  Opportunistic security protocols may, when applicable,
     refuse to communicate with peers for which higher security is
     expected, but for some reason not achieved.  The conditions
     under which connections fail should generally be limited to
     operational errors at one or the other peer or an active attack,
     so that well-maintained systems rarely encounter problems in
     normal use of opportunistic security.  </t>

     <t hangText="Encrypt by default:"> An opportunistic security
     protocol minimally encrypts communications, unless this is
     contrary to local policy.  Opportunistic security protocols may
     tolerate cleartext only to ensure successful communication with
     legacy peers that don't support encryption.  Whenever possible,
     opportunistic security should employ Perfect Forward Secrecy
     (PFS) to make recovery of previously sent keys and plaintext
     computationally expensive even after disclosure of long-term
     keys.  </t>

     <t hangText="No misrepresentation of security:"> Unauthenticated
     encrypted communication must not be misrepresented as communication
     over a secure channel.  </t>

    </list>
   </t>

   <t>
     In summary, the opportunistic security design pattern
     encompasses protocol designs that remove barriers to the
     widespread use of encryption on the Internet.  The actual
     protection provided by opportunistic security depends on the
     advertised capabilities of the communicating peers.
     Opportunistic security aims to encrypt all network traffic,
     while allowing fallback to cleartext with peers that do not
     appear to be encryption capable.
   </t>

  </section>

  <section title="Example: Opportunistic TLS in SMTP">

   <t>
     Many MTAs support the STARTTLS (<xref target="RFC3207"/>)
     ESMTP extension, however STARTTLS support is not yet universal.
     In the absence of local policy to the contrary, MTAs acting
     as SMTP clients are generally willing to send email in
     cleartext, but will employ TLS when the SMTP server's EHLO
     response advertises STARTTLS support.  Since the EHLO response
     is not cryptographically protected, this advertisement is
     vulnerable to MiTM downgrade attacks.  Thus opportunistic
     TLS based on STARTTLS support can only protect against passive
     attacks, and MTAs do not generally require peer authentication.
     Self-signed certificates are common on receiving MTAs, and
     the server name is generally obtained via insecure MX lookups.
   </t>

   <t>
     Therefore, MTAs that implement opportunistic TLS employ at
     most unauthenticated encryption, or else deliver over a
     cleartext channel.  However, recent reports from a number
     of large providers suggest that the majority of SMTP email
     transmission on the Internet is now encrypted.  And the trend
     is toward increasing adoption.
   </t>

   <t>
     Not only is the STARTTLS advertisement is vulnerable to active
     attacks, but also at present some MTAs that advertise STARTTLS
     exhibit various interoperability problems in their implementations.
     As a result, it is common practice to fall back to cleartext
     transmission not only when STARTTLS is not offered, but also
     when the TLS handshake fails, or even when TLS fails during
     message transmission.
   </t>

  </section>

  <section title="Security Considerations" anchor="sec_security">

    <t>
      Though opportunistic security potentially supports transmission
      in cleartext, unauthenticated encryption, or other cryptographic
      protection levels short of the strongest potentially applicable,
      the effective security for peers is always increased and never
      reduced.  If a cryptographic capability is neither required
      by policy nor supported by the peer, nothing is lost by going
      without.  Opportunistic security is strictly stronger than
      the alternative of providing no security services when maximal
      security is not applicable.
    </t>

    <t>
      Opportunistic security does not require reducing security
      policy to the lowest common denominator.  Opportunistic
      security coexists with and is preempted by any a-priori security
      policy that is not based on advertised peer capabilities.
      However, such a-priori policy can be counter-productive when
      it expects more than most peers can in fact deliver.  A-priori
      policy should be used with care, lest users find it too
      restrictive and act to disable security entirely.  Opportunistic
      security aims to enable incremental rollout of cryptographic
      protection against both passive and active attacks as appropriate
      software and configurations are deployed one system at a time.
    </t>

  </section>

  <section anchor="Acknowledgements" title="Acknowledgements">

    <t>
      I would like to thank Steve Kent.  Some of the text in this
      document is based on his earlier draft.  I would also like
      to thank Nico Williams, Paul Hoffman, Paul Wouters and Stephen
      Farrell for their helpful suggestions and support.
    </t>

  </section><!-- Acknowledgements -->

 </middle>

 <back>
  <references>
   &rfc2119;
   &rfc3207;
   &rfc4033;
   &rfc4949;
   &rfc5116;
   &rfc5246;
   &rfc5598;
   &rfc6125;
   &rfc6698;
   &rfc7258;
  </references>
 </back>
</rfc>
